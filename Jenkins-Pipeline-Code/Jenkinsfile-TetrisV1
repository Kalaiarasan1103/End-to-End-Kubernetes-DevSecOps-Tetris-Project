pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/Kalaiarasan1103/End-to-End-Kubernetes-DevSecOps-Tetris-Project.git'
            }
        }
         stage('Sonarqube Analysis') {
            steps {
                dir('Tetris-V1') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=TetrisVersion1.0 \
                        -Dsonar.projectKey=TetrisVersion1.0 '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Installing Dependencies') {
            steps {
                dir('Tetris-V1') {
                    sh 'npm install'
                }
            }
        }


        stage('Trivy File Scan') {
            steps {
                dir('Tetris-V1') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('Tetris-V1') {
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t tetrisv1 .'
                        }
                    }
                }
            }
        }

        stage("Docker Image Pushing") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker tag tetrisv1 kalai1103/tetrisv1:${BUILD_NUMBER}'
                        sh 'docker push kalai1103/tetrisv1:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image kalai1103/tetrisv1:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Checkout Code Again') {
            steps {
                git branch: 'master', url: 'https://github.com/Kalaiarasan1103/End-to-End-Kubernetes-DevSecOps-Tetris-Project.git'
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-DevSecOps-Tetris-Project"
                GIT_USER_NAME = "Kalaiarasan1103"
            }
            steps {
                dir('Manifest-file') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            sh '''
                                set -ex
                                git config user.email "Kalaiyarasan1103@gmail.com"
                                git config user.name "Kalaiarasan1103"

                                echo "Current Image Tag:"
                                grep -oP '(?<=tetrisv1:)[^ ]+' deployment-service.yml || true

                                sed -i "s/tetrisv1:.*/tetrisv1:${BUILD_NUMBER}/" deployment-service.yml
                                git status
                                git diff

                                git add deployment-service.yml || true
                                git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
                                git push https://${GITHUB_TOKEN}@github.com/Kalaiarasan1103/${GIT_REPO_NAME}.git HEAD:master
                            '''
                        }
                    }
                }
            }
        }
    }
}


